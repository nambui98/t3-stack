import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { signIn, signOut, useSession } from "next-auth/react";

import { api } from "~/utils/api";
import { useRouter } from "next/router";
import { useEffect, useState } from "react";

const Poll: NextPage = () => {
    const router = useRouter();
    const { pollId } = router.query;
    const { data, isLoading, refetch } = api.poll.getPoll.useQuery(
        { pollId: pollId as string },
        { enabled: !!pollId }
    );
    const [selectedAnswer, setSelectedAnswer] = useState<string | undefined>();
    const [hasAnswered, setHasAnswered] = useState<boolean>(false);
    const submitRes = api.poll.submitResponse.useMutation();

    useEffect(() => {
        setHasAnswered(!!localStorage.getItem(pollId as string));
    }, [pollId])


    const handlePollSubmit = (e: React.FormEvent<HTMLFormElement>) => {
        e.preventDefault();
        if (selectedAnswer) {
            submitRes.mutateAsync({
                answerId: selectedAnswer
            }).then(async () => {
                localStorage.setItem(pollId as string, "true");
                await refetch();
                setHasAnswered(true);
            }).catch((error) => { console.error(error) });
        }
    };
    return (
        <>
            <Head>
                <title>Create T3 App</title>
                <meta name="description" content="Generated by create-t3-app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c] text-white">

                {isLoading ? (
                    <>Loading...</>
                ) : (
                    <section className="flex flex-col gap-4">
                        <h1 className="mb-4 text-4xl">{data?.question}</h1>
                        {
                            hasAnswered ? data?.answers.map(answer =>
                                <div key={answer.id}>
                                    {answer.text} : {answer._count.response}
                                </div>
                            )
                                :
                                <form onSubmit={handlePollSubmit} className="flex flex-col gap-4">
                                    {data?.answers.map((answer) => {
                                        const inputId = `input-${answer.id}`;
                                        return (
                                            <fieldset key={answer.id} className="flex gap-4 text-2xl items-center">
                                                <input
                                                    type="radio"
                                                    id={inputId}
                                                    checked={selectedAnswer === answer.id}
                                                    onChange={(e) => setSelectedAnswer(e.target.value)}
                                                    value={answer.id}
                                                />
                                                <label htmlFor={inputId}>{answer.text}</label>
                                            </fieldset>
                                        );
                                    })}
                                    <button
                                        className="bg-blue-400 hover:bg-blue-600 text-2xl text-white rounded-md py-3 disabled:bg-slate-400"
                                        disabled={!selectedAnswer}
                                    >
                                        Submit
                                    </button>
                                </form>
                        }

                    </section>
                )}
            </main>
        </>
    );
};

export default Poll;
